---
# Source: devbox/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: devbox
    app.kubernetes.io/instance: devbox
  name: devbox
---
# Source: devbox/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: devbox
  namespace: default
  labels:
    app.kubernetes.io/name: devbox
    app.kubernetes.io/instance: devbox
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
apiVersion: v1
kind: Service
metadata:
  name: devbox
  labels:
    app.kubernetes.io/name: devbox
    app.kubernetes.io/instance: devbox
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: devbox
    app.kubernetes.io/instance: devbox
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devbox
  labels:
    app.kubernetes.io/name: devbox
    app.kubernetes.io/instance: devbox
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: devbox
      app.kubernetes.io/instance: devbox
  template:
    metadata:
      labels:
        app.kubernetes.io/name: devbox
        app.kubernetes.io/instance: devbox
    spec:
      imagePullSecrets:
        []
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: init-chmod-data
        image: "andrewkaczynski/devbox:1.2"
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - |
            if [ ! -d /home/coder/data ]; then mkdir /home/coder/data; fi &&
            chown -R 1000:1000 /home/coder
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /home/coder/data
      containers:
        - name: devbox
          image: "andrewkaczynski/devbox:1.2"
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000
          env:
          - name: PASSWORD
            valueFrom:
              secretKeyRef:
                name: devbox
                key: password
          volumeMounts:
          - name: data
            mountPath: /home/coder/data
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
      serviceAccountName: devbox
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: devbox
---
apiVersion: v1
kind: Secret
metadata:
  name: devbox
  labels:
    app.kubernetes.io/instance: devbox
type: Opaque
data:
  password: "Y1VxVGJ0bER5bDZucHl0Mmp6ZmxXdUs1"